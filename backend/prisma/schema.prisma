// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Thing {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  createdAt  DateTime         @default(now())

  config     ThingConfig?     @relation(fields: [configId], references: [id])
  configId   Int?             @unique

  telemetry  TelemetryData[]
}

model ThingConfig {
  id         Int                 @id @default(autoincrement())
  thing      Thing?              @relation
  parameters ConfigParameter[]   
  variables  TelemetryVariable[] 
}

// Possible config parameters for a Thing
model ConfigParameter {
  id         Int          @id @default(autoincrement())
  key        String
  value      String

  config     ThingConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   Int

  @@unique([configId, key])
}

// Possible telemetry variables for a Thing
model TelemetryVariable {
  id         Int          @id @default(autoincrement())
  name       String
  
  config     ThingConfig  @relation(fields: [configId], references: [id], onDelete: Cascade)
  configId   Int

  @@unique([configId, name])
}

model TelemetryData {
  id         Int       @id @default(autoincrement())
  variable   String
  value      Float
  timestamp  DateTime  @default(now())

  thing      Thing     @relation(fields: [thingId], references: [id], onDelete: Cascade)
  thingId    Int
}
